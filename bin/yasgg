#!/usr/bin/env perl
use File::Basename;
use File::Copy            qw(copy);
use File::Copy::Recursive qw(dircopy);
use File::Find;
use File::ShareDir qw(dist_dir);
use File::Slurp    qw(write_file read_file);
use Getopt::Long   qw(GetOptions);
use Image::Magick::Thumbnail 0.06;
use Scalar::MoreUtils qw(empty);
use Template::Liquid;
use MIME::Types;

# Required since dist_dir is RO
$File::Copy::Recursive::KeepMode = 0;

use strictures 2;
$| = 1;

our $VERSION = '1.00';

my $dist_dir = dist_dir('App-yasgg');

my $INDEX_TEMPLATE = "$dist_dir/template.html";
my $TEMPLATE       = "$dist_dir/html5up-lens";
my @SASS_FILES     = (
  {
    input  => 'assets/sass/main.scss',
    output => 'assets/css/main.css',
  },
  {
    input  => 'assets/sass/noscript.scss',
    output => 'assets/css/noscript.css',
  }
);

my ( $in, $help, $out );

GetOptions(
  'in=s'  => \$in,
  'out=s' => \$out,
  'help'  => \$help,
) or help();

$help && help();
$in  || help();
$out || help();

unlink $out if -e $out;    # Remove output dir if exists
dircopy( $TEMPLATE, $out ) # Copy html5up-lens as is to output dir
  or die $!;

# Remove cruft
unlink $out . "/LICENSE.txt" if -e $out . "/LICENSE.txt";
unlink $out . "/README.txt"  if -e $out . "/README.txt";
unlink glob $out . "'/images/fulls/*.*'";
unlink glob $out . "'/images/thumbs/*.*'";

# Compile sass to css
my $sass = CSS::Sass->new(
  output_style    => SASS_STYLE_COMPRESSED,
  source_comments => 0,
  dont_die        => 0,
);

foreach (@SASS_FILES) {
  my $input_sass = $out . '/' . $_->{'input'};
  my $output_css = $out . '/' . $_->{'output'};
  my $css        = $sass->compile_file($input_sass);
  write_file( $output_css, $css );
}

my @input_files;
find(
  {
    wanted => sub { -f and push @input_files, $_; },
    follow => 0
  },
  $in
);

my $mt = MIME::Types->new;

my @pics_array;
foreach ( sort { $a cmp $b } @input_files ) {
  my $type = $mt->mimeTypeOf("$in/$_");
  if ( empty($type) )                  { next; }
  if ( rindex $type, 'image', 0 != 0 ) { next; }

  my $magick = Image::Magick->new;
  my ( $width, $height, $size, $format ) = $magick->Ping("$in/$_");
  if ( empty($format) ) { next; }

  $magick->Read("$in/$_");

  push @pics_array, $_;
  print "Generating thumbnail for $_\n";
  my ( $thumb, $x, $y ) = Image::Magick::Thumbnail::create( $magick, '660x525' );
  $thumb->Write( $out . "/images/thumbs/$_" );

  print "Copy $_ to $out/images/fulls/$_\n";
  copy( "$in/$_", $out . "/images/fulls/$_" ) or die $!;
}

my $index_template = read_file($INDEX_TEMPLATE);
my $template       = Template::Liquid->parse($index_template);
write_file(
  $out . '/index.html',
  $template->render(
    site     => { name => 'YASGG' },
    pictures => \@pics_array,
    date     => { year => (localtime)[5] + 1900 },
  )
);

sub help {
  print "\n" . "yasgg --out site --input ./pics" . "\n";
  exit 0;
}

__END__

=pod
 
=head1 NAME
 
yasgg - generate a static gallery
 
=head1 SYNOPSIS
 
    yasgg --help --in=<name> --out=<URL> --title=<name>
          --css=<URL> --title=<name>
 
=head1 DESCRIPTION
 
Converts files from pod format (see L<perlpod>) to HTML format.
 
=head1 ARGUMENTS
 
pod2html takes the following arguments:
 
=over 4
 
=item help
 
  --help
 
Displays the usage message.
 
=item htmldir
 
  --htmldir=name
 
Sets the directory to which all cross references in the resulting HTML file
will be relative. Not passing this causes all links to be absolute since this
is the value that tells Pod::Html the root of the documentation tree.
 
Do not use this and --htmlroot in the same call to pod2html; they are mutually
exclusive.
 
=item htmlroot
 
  --htmlroot=URL
 
Sets the base URL for the HTML files.  When cross-references are made, the
HTML root is prepended to the URL.
 
Do not use this if relative links are desired: use --htmldir instead.
 
Do not pass both this and --htmldir to pod2html; they are mutually exclusive.
 
=item infile
 
  --infile=name
 
Specify the pod file to convert.  Input is taken from STDIN if no
infile is specified.
 
=item outfile
 
  --outfile=name
 
Specify the HTML file to create.  Output goes to STDOUT if no outfile
is specified.
 
=item podroot
 
  --podroot=name
 
Specify the base directory for finding library pods.
 
=item podpath
 
  --podpath=name:...:name
 
Specify which subdirectories of the podroot contain pod files whose
HTML converted forms can be linked-to in cross-references.
 
=item cachedir
 
  --cachedir=name
 
Specify which directory is used for storing cache. Default directory is the
current working directory.
 
=item flush
 
  --flush
 
Flush the cache.
 
=item backlink
 
  --backlink
 
Turn =head1 directives into links pointing to the top of the HTML file.
 
=item nobacklink
 
  --nobacklink
 
Do not turn =head1 directives into links pointing to the top of the HTML file
(default behaviour).
 
=item header
 
  --header
 
Create header and footer blocks containing the text of the "NAME" section.
 
=item noheader
 
  --noheader
 
Do not create header and footer blocks containing the text of the "NAME"
section (default behaviour).
 
=item poderrors
 
  --poderrors
 
Include a "POD ERRORS" section in the outfile if there were any POD errors in
the infile (default behaviour).
 
=item nopoderrors
 
  --nopoderrors
 
Do not include a "POD ERRORS" section in the outfile if there were any POD
errors in the infile.
 
=item index
 
  --index
 
Generate an index at the top of the HTML file (default behaviour).
 
=item noindex
 
  --noindex
 
Do not generate an index at the top of the HTML file.
 
 
=item recurse
 
  --recurse
 
Recurse into subdirectories specified in podpath (default behaviour).
 
=item norecurse
 
  --norecurse
 
Do not recurse into subdirectories specified in podpath.
 
=item css
 
  --css=URL
 
Specify the URL of cascading style sheet to link from resulting HTML file.
Default is none style sheet.
 
=item title
 
  --title=title
 
Specify the title of the resulting HTML file.
 
=item quiet
 
  --quiet
 
Don't display mostly harmless warning messages.
 
=item noquiet
 
  --noquiet
 
Display mostly harmless warning messages (default behaviour). But this is not
the same as "verbose" mode.
 
=item verbose
 
  --verbose
 
Display progress messages.
 
=item noverbose
 
  --noverbose
 
Do not display progress messages (default behaviour).
 
=back
 
=head1 AUTHOR
 
Tom Christiansen, E<lt>tchrist@perl.comE<gt>.
 
=head1 BUGS
 
See L<Pod::Html> for a list of known bugs in the translator.
 
=head1 SEE ALSO
 
L<perlpod>, L<Pod::Html>
 
=head1 COPYRIGHT
 
This program is distributed under the Artistic License.
 
=cut
